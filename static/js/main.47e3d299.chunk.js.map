{"version":3,"sources":["logo.svg","components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","styles","fontSize","fontWeight","this","props","counter","onDelete","onIncrement","className","getBadgeClass","formatCount","onClick","style","id","classes","value","Component","Counters","onReset","counters","map","count","key","NavBar","val","navValue","totalVal","href","marginLeft","App","useState","state","setState","filter","x","length","vtotal","forEach","v","totalNav","c","push","index","indexOf","counterId","counts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47e3d299.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n     styles = {\r\n        fontSize: 10,\r\n        fontWeight: 'bold'\r\n     };\r\n\r\n    render() { \r\n        const {counter, onDelete, onIncrement} = this.props;\r\n        return (\r\n        <>\r\n            <span className={this.getBadgeClass()}>{this.formatCount()}</span>\r\n            <button onClick={() => onIncrement(counter)}\r\n            style={this.styles} \r\n            className=\"btn btn-secondary btn-sm\">\r\n                Increment\r\n            </button>\r\n            <button \r\n            onClick={() => onDelete(counter.id)} \r\n            className=\"btn btn-danger btn-sm m-2\">Delete</button><br></br>\r\n           \r\n        </>\r\n            \r\n        );\r\n    }\r\n\r\n    getBadgeClass() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const {value} = this.props.counter;\r\n        return value === 0 ? \"Zero\" : value;\r\n    }\r\n}\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nconst Counters = (props) => {\r\n    const {onDelete, onIncrement, onReset, counters} = props\r\n    return ( \r\n        <>\r\n        <button className=\"btn btn-primary btn-sm m-2\" onClick={onReset}>\r\n            Reset\r\n        </button><br/>\r\n        {\r\n        counters.map(count => \r\n\r\n        <Counter onDelete={onDelete}\r\n        onIncrement={onIncrement} \r\n        id={count.id} \r\n        key={count.id} \r\n        counter={count}/>\r\n        )}<br/>\r\n        </>\r\n    );\r\n} \r\nexport default Counters;\r\n","import React, { Component } from 'react';\r\n\r\nconst NavBar = (props) => {\r\n    const {navValue, totalVal} = props;\r\n    const formatTotal = val => {\r\n        return val === 0 ? \"non selected\" : val;\r\n    }\r\n\r\n    return (\r\n        <> \r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                No of Rows Clicked \r\n                <span className=\"badge m-2 badge-secondary\">\r\n                    {navValue}\r\n                </span>\r\n                <span style={{marginLeft:\"100%\"}}>\r\n                    Total Number of Clicks: \r\n                    <span className=\"badge m-2 badge-info\">\r\n                        {formatTotal(totalVal)}\r\n                    </span>\r\n                </span>\r\n                \r\n            </a>\r\n        </nav>\r\n        \r\n        </>\r\n     );\r\n}\r\n \r\nexport default NavBar;","import React , { useState }  from 'react';\nimport logo from './logo.svg';\nimport Counters from './components/counters'\nimport NavBar from './components/navbar'\nimport './App.css';\n\nfunction App() {\n  \n  const [state, setState] = useState({ \n    counter: [\n        {id: 1, value: 4},\n        {id: 2, value: 0},\n        {id: 3, value: 2},\n        {id: 4, value: 0}\n    ]\n })\n\n const handleIncrement = count => {\n    const counter = [...state.counter];\n    const index = counter.indexOf(count);\n    counter[index] = {...count}\n    counter[index].value++;\n    setState({counter});\n }\n\n const handleDelete = (counterId) => {\n     const counts = state.counter.filter(x => x.id !== counterId);\n     setState({counter: counts});\n };\n\n const handleReset = () => {\n    // const counter = this.state.counter.map(x => {\n    //     x.value = 0;\n    //     return x;\n    // });\n    const counter = []\n    state.counter.forEach(c => {\n        c.value = 0;\n        counter.push(c);\n    });\n    setState({counter})\n }\n\n const totalNav = (val) => {\n    let vtotal = 0\n    val.forEach(v => {\n      vtotal = vtotal + v.value;\n    })\n    return vtotal;\n }\n\n  return (\n    <>\n    <NavBar \n    navValue={state.counter.filter(x => x.value > 0).length}\n    totalVal={totalNav(state.counter)}\n    />\n\n    <main className=\"container\"\n    style={{marginLeft:\"10px\"}}>\n    <Counters\n    onReset={handleReset}\n    onIncrement={handleIncrement}\n    onDelete={handleDelete}\n    counters={state.counter}\n    />\n    </main>\n    </>\n  );\n}\n//state.counter.reduce((n, {value}) => n + value, 0)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}